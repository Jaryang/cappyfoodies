{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6fc4bf18",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-3-ed57b32d7916>:130: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  new_df[\"state\"][new_df[\"state\"] != \"IL\"] = None\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import re\n",
    "import os\n",
    "import ast\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "DROP_LIST = [\"Unnamed: 0\",\"alias\", \"image_url\", \"coordinates\", \"transactions\",\n",
    "            \"phone\", \"display_phone\"]\n",
    "    \n",
    "\n",
    "def construct_location(dataset):\n",
    "    \"\"\"\n",
    "    Contruct \"city, and state\" columns for the dataset\n",
    "    \n",
    "    Inputs:\n",
    "        dataset: pd.DataFrame\n",
    "    \"\"\"\n",
    "    \n",
    "    def get_loc(loc_text, key):# Function used extract location from a dict-like string\n",
    "        \n",
    "        loc_dict = ast.literal_eval(loc_text)\n",
    "        \n",
    "        return loc_dict[key]\n",
    "    \n",
    "    dataset[\"city\"] = dataset[\"location\"].map(lambda loc_text: get_loc(loc_text, \"city\"))\n",
    "    dataset[\"city\"] = dataset[\"city\"].map(lambda x: x.lower())\n",
    "    dataset[\"state\"] = dataset[\"location\"].map(lambda loc_text: get_loc(loc_text, \"state\"))\n",
    "    \n",
    "\n",
    "def set_price_level(dataset):\n",
    "    \"\"\"\n",
    "    Add a new column into the dataset by the dollarsign specified by each business\n",
    "    example:\n",
    "        each $ = 9.5 dollars\n",
    "    \"\"\"\n",
    "    \n",
    "    def cal_dollar_sign(symbol):\n",
    "        \n",
    "        if type(symbol) == float:\n",
    "            return None\n",
    "        \n",
    "        if re.findall(r\"\\$+\", symbol) != []:\n",
    "            return 9.5 * len(symbol)\n",
    "        \n",
    "        return None\n",
    "        \n",
    "    dataset[\"price_level\"] = dataset[\"price\"].map(cal_dollar_sign)\n",
    "\n",
    "    \n",
    "def construct_zip_code(dataset):\n",
    "    \"\"\"\n",
    "    Extract the zip code from the location string and construct a new zip code column in place\n",
    "    \"\"\"\n",
    "    \n",
    "    # Function used to extract 5-digits zip code\n",
    "    def get_zip_code(text):\n",
    "        \n",
    "        zip_code = re.findall(r\"\\'\\d{5}\\'\", text)\n",
    "        \n",
    "        if zip_code == []:\n",
    "            return None\n",
    "        \n",
    "        return zip_code[0].replace(\"\\'\", \"\")\n",
    "\n",
    "    dataset[\"zip_code\"] = dataset[\"location\"].map(get_zip_code)\n",
    "\n",
    "\n",
    "def category_cleaner(dataset):\n",
    "    \"\"\"\n",
    "    Clean the category data for each business of the dataset\n",
    "    \"\"\"\n",
    "    \n",
    "    def reset_list(cate_text): # Function used to extract info from \"title\"\n",
    "        \n",
    "        new_lst = []\n",
    "        text_lst = ast.literal_eval(cate_text)\n",
    "        for item in text_lst:\n",
    "            new_lst.append(item[\"title\"])\n",
    "        \n",
    "        return new_lst\n",
    "    \n",
    "    def check_is_food(cate_lst, labels):# Function used to check food categories\n",
    "        \n",
    "        for label in labels:\n",
    "            if label in cate_lst:\n",
    "                return True\n",
    "        \n",
    "        return False\n",
    "    \n",
    "    # Extract categories from the \"title\" in the given data\n",
    "    dataset[\"categories\"] = dataset[\"categories\"].map(reset_list)\n",
    "    \n",
    "    # Load in a csv file containing labels related to food,\n",
    "    # where \"1\" and \"a\" represent categories that are related to food\n",
    "    labels = pd.read_csv(\"yelp_dataset/label.csv\")\n",
    "    labels = labels[(labels[\"is_food\"] == \"1\") | (labels[\"is_food\"] == \"a\")]\n",
    "    food_labels = labels[\"categories\"]\n",
    "    \n",
    "    # Filter out entries with categories that are irrelevant to food\n",
    "    fil_con = dataset[\"categories\"].map(lambda cate_lst: check_is_food(cate_lst, food_labels))\n",
    "    dataset = dataset[fil_con]\n",
    "    \n",
    "    return dataset\n",
    "    \n",
    "\n",
    "def business_cleaner(dataset):\n",
    "    \"\"\"\n",
    "    Clean the dataset by specified state and categories\n",
    "    \n",
    "    Inputs:\n",
    "        dataset: pd.DataFrame\n",
    "    Returns: a filtered pd.DataFrame\n",
    "    \"\"\"\n",
    "    \n",
    "    # Drop unuseful columns\n",
    "    new_df = dataset.drop(DROP_LIST, axis = 1)\n",
    "    \n",
    "    # Clean each entry of catogory column\n",
    "    new_df = category_cleaner(new_df)\n",
    "    \n",
    "    # Set the price_level column\n",
    "    set_price_level(new_df)\n",
    "    \n",
    "    # Set the zip_code column\n",
    "    construct_zip_code(new_df)\n",
    "    \n",
    "    # Construct the location and change none-IL data to NA\n",
    "    construct_location(new_df)\n",
    "    new_df[\"state\"][new_df[\"state\"] != \"IL\"] = None\n",
    "    \n",
    "    # Drop rows with missing values\n",
    "    new_df.dropna(axis = 0, inplace = True)\n",
    "\n",
    "    # return restaurants that are still open\n",
    "    return new_df[new_df[\"is_closed\"] == False].reset_index(drop = True)\n",
    "\n",
    "\n",
    "def df_to_csv(dataset, filename):\n",
    "    \"\"\"\n",
    "    Write pd.dataframe to csv file\n",
    "    \"\"\"\n",
    "    \n",
    "    assert filename.endswith(\".csv\"), \"the format should be .csv !\"\n",
    "    \n",
    "    address = 'yelp_dataset/cleaned_data'\n",
    "    os.makedirs(address, exist_ok=True)\n",
    "    file_path = address + \"/\" + filename\n",
    "    dataset.to_csv(file_path)\n",
    "    \n",
    "    \n",
    "\n",
    "if __name__==\"__main__\":\n",
    "    \n",
    "    business_dta = pd.read_csv(\"yelp_dataset/yelp_businesses_new.csv\")\n",
    "    new_dta = business_cleaner(business_dta)\n",
    "    df_to_csv(new_dta, \"business_cleaned_v3.csv\")\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ecf49ac2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
